namespace ca.mcgill.ecse223.quoridor.controller;

use QuoridorGame.ump;

class PawnBehavior {

    0..1 -> 0..1 Game currentGame;
    0..1 -> 0..1 Player player;

    pawnSM {
    	Playing{
    		NorthSouth{
    			Setup{
    				startGame -> AtNorthEdge
    			}
    			AtNorthEdge{
    				moveUp -> AtNorthEdge;
    				moveDown [isLegalStep(MoveDirection.South) && !isLegalJump(MoveDirection.South)] -> AtNorthBorder;
    				moveDown [isLegalStep(MoveDirection.South) && isLegalJump(MoveDirection.South)] -> MiddleNS;
    			}
    			AtNorthBorder{
    				moveUp [isLegalStep(MoveDirection.North)]  -> AtNorthEdge;
    				moveDown [isLegalStep(MoveDirection.South)] -> MiddleNS;
    			}
    			AtSouthEdge{
    				moveUp [isLegalStep(MoveDirection.North) && !isLegalJump(MoveDirection.North)]  -> AtNorthBorder;
    				moveUp [isLegalStep(MoveDirection.North) && isLegalJump(MoveDirection.North)]  -> MiddleNS;
    				moveDown -> AtSouthEdge;
    			} 
    			AtSouthBorder{
    				moveUp [isLegalStep(MoveDirection.North)] -> MiddleNS;
    				moveDown [isLegalStep(MoveDirection.South)] -> AtSouthEdge;
    			}
    			MiddleNS{
    				moveUp [isLegalStep(MoveDirection.North) && !isLegalJump(MoveDirection.North) && getCurrentPawnRow()==3] -> AtNorthBorder;
    				moveUp [isLegalStep(MoveDirection.North) && isLegalJump(MoveDirection.North) && getCurrentPawnRow()==3] -> AtNorthEdge;
    				moveUp [isLegalStep(MoveDirection.North) && isLegalJump(MoveDirection.North) && getCurrentPawnRow()==4] -> AtNorthBorder;
    				moveUp -> MiddleNS;
    				
    				moveDown [isLegalStep(MoveDirection.South) && !isLegalJump(MoveDirection.South) && getCurrentPawnRow()==7] -> AtSouthBorder;
    				moveDown [isLegalStep(MoveDirection.South) && isLegalJump(MoveDirection.South) && getCurrentPawnRow()==7] -> AtSouthEdge;
    				moveDown [isLegalStep(MoveDirection.South) && isLegalJump(MoveDirection.South) && getCurrentPawnRow()==6] -> AtNorthBorder;
    				moveDown -> MiddleNS;
    			}
    		} 
    		||
    		
    		EastWest{
    			Setup{
    				startGame -> MiddleEW
    			}
    			AtEastEdge{
    				moveRight -> AtEastEdge;
    				moveLeft [isLegalStep(MoveDirection.West) && !isLegalJump(MoveDirection.West)] -> AtWestBorder;
    				moveLeft [isLegalStep(MoveDirection.West) && isLegalJump(MoveDirection.West)] -> MiddleEW;
    			}
    			AtEastBorder{
    				moveRight [isLegalStep(MoveDirection.East)]  -> AtEastEdge;
    				moveLeft [isLegalStep(MoveDirection.West)] -> MiddleEW;
    			}
    			AtWestEdge{
    				moveRight [isLegalStep(MoveDirection.East) && !isLegalJump(MoveDirection.East)]  -> AtWestBorder;
    				moveRight [isLegalStep(MoveDirection.East) && isLegalJump(MoveDirection.East)]  -> MiddleEW;
    				moveLeft -> AtWestEdge;
    			} 
    			AtWestBorder{
    				moveRight [isLegalStep(MoveDirection.North)] -> MiddleEW;
    				moveLeft [isLegalStep(MoveDirection.South)] -> AtWestEdge;
    			}
    			MiddleEW{
    				moveRight [isLegalStep(MoveDirection.East) && !isLegalJump(MoveDirection.East) && getCurrentPawnColumn()==7] -> AtEastBorder;
    				moveRight [isLegalStep(MoveDirection.East) && isLegalJump(MoveDirection.East) && getCurrentPawnColumn()==7] -> AtEastEdge;
    				moveRight [isLegalStep(MoveDirection.East) && isLegalJump(MoveDirection.East) && getCurrentPawnColumn()==6] -> AtEastBorder;
    				moveRight -> MiddleEW;
    				
    				moveLeft [isLegalStep(MoveDirection.West) && !isLegalJump(MoveDirection.West) && getCurrentPawnColumn()==3] -> AtWestBorder;
    				moveLeft [isLegalStep(MoveDirection.West) && isLegalJump(MoveDirection.West) && getCurrentPawnColumn()==3] -> AtWestEdge;
    				moveLeft [isLegalStep(MoveDirection.West) && isLegalJump(MoveDirection.West) && getCurrentPawnColumn()==4] -> AtWestBorder;
    				moveLeft -> MiddleEW;
    			}
    		}
    	}
    	
    	Finished{
  
    	}
    }
    
    // Returns the current row number of the pawn
    int getCurrentPawnRow() { return 0; }
    
    // Returns the current column number of the pawn
    int getCurrentPawnColumn() { return 0; }
    
    // Returns if it is legal to step in the given direction
    boolean isLegalStep(MoveDirection dir) { return false; }
    
    // Returns if it is legal to jump in the given direction
    boolean isLegalJump(MoveDirection dir) { return false; }

    // Action to be called when an illegal move is attempted
    void illegalMove() { }
    
    // Enumeration for the possible moving directions
    // (directions are from the viewpoint of white player)
    enum MoveDirection { East, South, West, North ;}
}
