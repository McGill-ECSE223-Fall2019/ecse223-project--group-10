class Quoridor{
   0..1 <@>- * Game;
   0..1 <@>- 1 PlayerList; 
}
class PlayerList{
0..1 <@>- * Player gamePlayers;
}
class Player{
  unique userName;
  Integer playerScore;
  Integer playerWin;
  Integer playerLoss;
  Integer playerTie;
  0..1 -> 0..1 Pawn currentPawn;
}
class Game{
  Boolean isOver;
  0..1 -> 0..1 Player winner;
  0..1 <@>- 1 Board gameBoard;
  0..1 <@>- * Move moves;
    0..1 <@>- 1 Position boardPosition;
}
class Board{
   0..1 <@>- 2 Pawn pawns;
   0..1 <@>- 0..20 Wall walls;
}
class Position{
0..1 blackPawnPosition -> 0..1 Pawn blackPawn;
0..1 blackWallPosition->  0..10 Wall blackWalls;
0..1 whitePawnPosition <@>- 0..1 Pawn whitePawn;
0..1 whiteWallPosition <@>- 0..10 Wall whiteWalls;
}
class Pawn{
0..1 ->  1 Cordinate cordinate;
  Time remainingTime;
  Integer wallStock;
}
class Wall {
  enum orientation{Horizontal, Vertical};
  enum state{Highlighted,NotHighlighted};
   0..10 -- 1 Pawn wallOwner;
  Integer x;
  Integer y;
}
class Move{
  abstract;
  0..1 ->0..1 Pawn user;
}
class Cordinate{
  Integer x; 
  Integer y;
}

class PawnMove{
  isA Move;
  0..1->  1 Cordinate cordinate;
}
class AddWall{
  isA Move;
  0..1 ->  1 Cordinate wallCord;
  enum orientation{Horizontal, Vertical};
}
class Jump{
  isA Move;
  0..1 ->  1 Cordinate jumpTo;
}